{"version":3,"sources":["shapes/Box.js","textures/clouds.jpg","components/Text.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","mesh","useRef","useState","hovered","setHover","active","setActive","useFrame","current","rotation","x","y","ref","scale","onClick","event","onPointerOver","onPointerOut","args","color","Text","z","geometry","center","textOptions","font","THREE","parse","Kumar","size","height","three_texture","load","texture","wrapS","wrapT","repeat","set","position","attach","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kgpKA+BeA,EA5BH,SAACC,GAEX,IAAMC,EAAOC,mBAFQ,EAKOC,oBAAS,GALhB,mBAKdC,EALc,KAKLC,EALK,OAMOF,oBAAS,GANhB,mBAMdG,EANc,KAMNC,EANM,KAarB,OAJAC,aAAS,WACPP,EAAKQ,QAAQC,SAASC,EAAIV,EAAKQ,QAAQC,SAASE,GAAK,OAIrD,iDACMZ,GADN,IAEEa,IAAKZ,EACLa,MAAOR,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GACzCS,QAAS,SAACC,GAAD,OAAWT,GAAWD,IAC/BW,cAAe,SAACD,GAAD,OAAWX,GAAS,IACnCa,aAAc,SAACF,GAAD,OAAWX,GAAS,IANpC,UAQE,mCAAmBc,KAAM,CAAC,EAAG,EAAG,KAChC,sCAAsBC,MAAOhB,EAAU,UAAY,gB,eC1B1C,MAA0B,mCC0C1BiB,EApCF,SAACrB,GACZ,IAAMC,EAAOC,mBAEbM,aAAS,WACPP,EAAKQ,QAAQC,SAASC,GAAK,IAC3BV,EAAKQ,QAAQC,SAASE,GAAK,IAC3BX,EAAKQ,QAAQC,SAASY,GAAK,IAC3BrB,EAAKQ,QAAQc,SAASC,YAIxB,IAGMC,EAAc,CAClBC,MAJW,IAAIC,cAAmBC,MAAMC,GAKxCC,KAAM,EACNC,OAAQ,GAGJC,GAAgB,IAAIL,iBAAsBM,KAAKC,GAKrD,OAJAF,EAAcG,MAAQR,iBACtBK,EAAcI,MAAQT,iBACtBK,EAAcK,OAAOC,IAAI,GAAK,IAG5B,uBAAMC,SAAU,CAAC,EAAG,GAAI,IAAK1B,IAAKZ,EAAlC,UACE,8BACEuC,OAAO,WACPrB,KAAM,CAAC,qCAAsCM,KAE/C,sCAAsBe,OAAO,WAAWrB,KAAM,CAAEsB,IAAKT,SCpB5CU,EAVH,SAAC1C,GAAD,OACV,eAAC,IAAD,WACE,iCACA,4BAAYuC,SAAU,CAAC,GAAI,GAAI,MAC/B,cAAC,EAAD,IACA,cAAC,EAAD,CAAKA,SAAU,EAAE,KAAM,EAAG,KAC1B,cAAC,EAAD,CAAKA,SAAU,CAAC,KAAM,EAAG,SCDdI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c13a4c79.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nconst Box = (props) => {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n  });\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n    >\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? \"hotpink\" : \"orange\"} />\n    </mesh>\n  );\n};\n\nexport default Box;\n","export default __webpack_public_path__ + \"static/media/clouds.7b2f6ee2.jpg\";","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport Kumar from \"../fonts/kumar.json\";\nimport texture from \"../textures/clouds.jpg\";\n\nconst Text = (props) => {\n  const mesh = useRef();\n\n  useFrame(() => {\n    mesh.current.rotation.x += 0.01;\n    mesh.current.rotation.y += 0.01;\n    mesh.current.rotation.z += 0.01;\n    mesh.current.geometry.center();\n  });\n\n  // parse JSON file with Three\n  const font = new THREE.FontLoader().parse(Kumar);\n\n  // configure font geometry\n  const textOptions = {\n    font,\n    size: 1,\n    height: 1,\n  };\n\n  const three_texture = new THREE.TextureLoader().load(texture);\n  three_texture.wrapS = THREE.RepeatWrapping;\n  three_texture.wrapT = THREE.RepeatWrapping;\n  three_texture.repeat.set(0.1, 0.1);\n\n  return (\n    <mesh position={[0, 5, -10]} ref={mesh}>\n      <textGeometry\n        attach=\"geometry\"\n        args={[\"Pa que te voy a decir que no si si\", textOptions]}\n      />\n      <meshStandardMaterial attach=\"material\" args={{ map: three_texture }} />\n    </mesh>\n  );\n};\n\nexport default Text;\n","import ReactDOM from \"react-dom\";\nimport React, { useRef, useState } from \"react\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\n\nimport { Box } from \"./shapes\";\nimport { Text } from \"./components\";\n\nconst App = (props) => (\n  <Canvas>\n    <ambientLight />\n    <pointLight position={[10, 10, 10]} />\n    <Text />\n    <Box position={[-1.2, -2, 0]} />\n    <Box position={[1.2, -2, 0]} />\n  </Canvas>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}